python ./utils/test.py --size 5x5x5

- 555 phase1+2 could be faster by
    - have phase1 return all solutions of the shortest length
    - could build a lookup table of phase2 costs...there are only 165 million states in phase2
    - could also have phase2 return all solutions of the shortest length
    - could phase3 then work for multiple phase1+2 solutions?  This would give us a way to find the
      shortest phase1+2+3 solution.

- 555 phase456 solution could be faster by
    - solve a bunch of cubes and find average solution lengths for phase5 and phase6
    - try all wing_str combos but put IDA max thresholds based on average solution lengths for phase5 and phase6
    - that would give us a much much faster way to try many wing_str combos

- 555 phase456 solution needs an option to take the 333 solution into account

- 555 phase45 use my-pt-states.txt to IDA search multiple wing_str combos as once?

- do we really need multipliers?


555 combine phase1+2..attempt #432
==================================
DONE - solve a few hundred of today's phase1 where we stage LR
DONE - use that to build a 2D heuristic matrix based on x-center cost and t-center cost. This
        will give us a way to get a heuristic that goes up to ~10.
DONE - we can use that same matrix for the UD x-center and t-centers
DONE - use multiplier 1.10, that will round 5 to 6, 6 to 7, etc

TODO - use threads. The solve above took 12 hours, with 8 threads that would be down to 1.5 hours.

Today our IDA search has the --centers-only option which chops a ton of branches by avoiding multiple permutations
of a series of outer layer moves.  For instance the moves "U F D" there is no need to do "F D U", "D U F", etc because
they all end up in the same state as "U F D". We can expand on this concept:
DONE - the order does not matter for a series of moves that are all on the same face "U Uw2 and 3Uw2"
DONE - if two moves are on opposite faces then the order does not matter..."Lw Rw" and "Rw Lw" will put you in the same state.
TODO - put these tricks to ida_search.c as well

TODO - build a lookup-table 6 moves deep. This will be ~35 million entries and would take about 2G to load so you wouldn't want
to run this on a pi. The lookup-table would use the same key that we use today for ida_explored and the value would be the move count.
- say our IDA max_threshold is 16, we know the solution will be 16 steps
- when node->cost_to_here is 10 we check the lookup-table to see if the current state is in there.  If it isn't then we can prune
  this branch. If there is a hit then we could flip a boolean to start using the lookup-table as our heuristic...that should make
  the remaining IDA search lighting fast.


The following are for:

./ida_search_via_graph \
    --prune-table-0-filename lookup-tables/lookup-table-5x5x5-step11-LR-centers-stage-t-center-only.bin --prune-table-0-state 218536 \
    --prune-table-1-filename lookup-tables/lookup-table-5x5x5-step12-LR-centers-stage-x-center-only.bin --prune-table-1-state 86325 \
    --prune-table-2-filename lookup-tables/lookup-table-5x5x5-step17-UD-centers-stage-t-center-only.bin --prune-table-2-state 594026 \
    --prune-table-3-filename lookup-tables/lookup-table-5x5x5-step18-UD-centers-stage-x-center-only.bin --prune-table-3-state 484064 \
    --centers-only --legal-moves "U,U',U2,Uw,Uw',Uw2,L,L',L2,Lw,Lw',Lw2,F,F',F2,Fw,Fw',Fw2,R,R',R2,Rw,Rw',Rw2,B,B',B2,Bw,Bw',Bw2,D,D',D2,Dw,Dw',Dw2" --uthash

uthash off
--centers-only
----------
[2021-08-23T13:42:00.030] IDA threshold 10, explored 0 nodes, took 0.000s, 0 nodes-per-sec
[2021-08-23T13:42:00.031] IDA threshold 11, explored 565 nodes, took 0.000s, 0 nodes-per-sec
[2021-08-23T13:42:00.033] IDA threshold 12, explored 13,774 nodes, took 0.002s, 6,887,000 nodes-per-sec
[2021-08-23T13:42:00.139] IDA threshold 13, explored 433,472 nodes, took 0.105s, 4,128,304 nodes-per-sec
[2021-08-23T13:42:03.997] IDA threshold 14, explored 13,310,942 nodes, took 3.857s, 3,451,112 nodes-per-sec
[2021-08-23T13:44:03.461] IDA threshold 15, explored 436,172,989 nodes, took 119.465s, 3,651,052 nodes-per-sec


uthash off
--centers-only
steps_on_same_face_in_order
----------------------------
[2021-08-23T13:44:35.149] IDA threshold 10, explored 0 nodes, took 0.000s, 0 nodes-per-sec
[2021-08-23T13:44:35.149] IDA threshold 11, explored 527 nodes, took 0.000s, 0 nodes-per-sec
[2021-08-23T13:44:35.152] IDA threshold 12, explored 12,249 nodes, took 0.002s, 6,124,500 nodes-per-sec
[2021-08-23T13:44:35.241] IDA threshold 13, explored 362,310 nodes, took 0.089s, 4,070,899 nodes-per-sec
[2021-08-23T13:44:38.135] IDA threshold 14, explored 10,484,098 nodes, took 2.894s, 3,622,701 nodes-per-sec
[2021-08-23T13:46:10.448] IDA threshold 15, explored 323,465,632 nodes, took 92.312s, 3,504,047 nodes-per-sec


uthash off
--centers-only
steps_on_same_face_in_order
steps_on_opposite_faces_in_order
--------------------------------
[2021-08-23T16:34:36.483] IDA threshold 10, explored 0 nodes, took 0.000s, 0 nodes-per-sec
[2021-08-23T16:34:36.483] IDA threshold 11, explored 466 nodes, took 0.000s, 0 nodes-per-sec
[2021-08-23T16:34:36.485] IDA threshold 12, explored 9,817 nodes, took 0.002s, 4,908,500 nodes-per-sec
[2021-08-23T16:34:36.562] IDA threshold 13, explored 255,287 nodes, took 0.076s, 3,359,039 nodes-per-sec
[2021-08-23T16:34:38.283] IDA threshold 14, explored 6,591,154 nodes, took 1.722s, 3,827,615 nodes-per-sec
[2021-08-23T16:35:26.596] IDA threshold 15, explored 179,607,639 nodes, took 48.312s, 3,717,661 nodes-per-sec
[2021-08-23T16:55:59.565] IDA threshold 16, explored 4,931,660,536 nodes, took 1232.969s, 3,999,825 nodes-per-sec
[2021-08-23T23:05:10.149] IDA count 88,955,412,703, f_cost 16 vs threshold 17 (cost_to_here 16, cost_to_goal 0)
SOLUTION: L2 R2 Fw2 U2 F Lw Dw2 Lw D Fw' Rw' Dw2 Lw2 Rw2 Dw' Bw' 
[2021-08-23T23:05:10.149] IDA threshold 17, explored 88,955,412,703 nodes, took 22150.584s, 4,015,940 nodes-per-sec
[2021-08-23T23:05:10.149] IDA found solution, explored 94,073,537,602 total nodes, took 23433.668s, 4,014,460 nodes-per-sec

       PT0  PT1  PT2  PT3  PT4  PER01  PER02  CTG  TRU  IDX
       ===  ===  ===  ===  ===  =====  =====  ===  ===  ===
  INIT   6    7    6    6    0      0      0    0   16    0
   L2    5    6    6    6    0      0      0    6   15    1
   R2    6    6    6    7    0      0      0    7   14    2
  Fw2    6    7    6    6    0      0      0    7   13    3
   U2    6    6    7    6    0      0      0    7   12    4
    F    6    5    6    5    0      0      0    6   11    5
   Lw    7    6    6    5    0      0      0    7   10    6
  Dw2    6    6    6    5    0      0      0    6    9    7
   Lw    6    5    6    5    0      0      0    6    8    8
    D    5    4    5    4    0      0      0    5    7    9
  Fw'    4    3    4    3    0      0      0    4    6   10
  Rw'    4    2    4    2    0      0      0    4    5   11
  Dw2    4    2    4    2    0      0      0    4    4   12
  Lw2    3    3    3    3    0      0      0    3    3   13
  Rw2    2    2    2    2    0      0      0    2    2   14
  Dw'    1    1    1    1    0      0      0    1    1   15
  Bw'    0    0    0    0    0      0      0    0    0   16

This solve originally took 12 hours but is now down to 6 1/2 hours



==============
For this solve WITHOUT steps_on_same_face_in_order we find a 12 move solution
./ida_search --kociemba .........xxL...x...x..x...x..x...x...xLx..................xxL...x...L..x...x..x...x...xxx..................xxx...x...x..L...x..L...x...xLL..................LxL...L...L..x...x..L...x...xLx..................xxx...x...x..L...L..x...L...xLL..................xxx...L...x..L...x..x...L...LxL......... --type 7x7x7-LR-oblique-edges-stage --centers-only --legal-moves "U,U',U2,Uw,Uw',Uw2,3Uw2,L,L',L2,Lw,Lw',Lw2,3Lw,3Lw',3Lw2,F,F',F2,Fw,Fw',Fw2,3Fw2,R,R',R2,Rw,Rw',Rw2,3Rw,3Rw',3Rw2,B,B',B2,Bw,Bw',Bw2,3Bw2,D,D',D2,Dw,Dw',Dw2,3Dw2"
SOLUTION: 3Bw2 3Lw2 Uw' 3Lw 3Uw2 D 3Fw2 F 3Rw2 Uw' Fw 3Rw2 

but WITH steps_on_same_face_in_order we find a 13 move solution
SOLUTION: 3Uw2 Fw2 3Rw2 F 3Lw Uw' 3Lw Uw' 3Bw2 3Rw' F' Fw2 3Rw 

the key is the 7th/8th step "3Fw2 F" sequence in the 12 move solution...when we are running WITH steps_on_same_face_in_order
this gets reversed to "F 3Fw2".  So in the original solution at step 7 we do 3Fw2 which pairs some oblique edges and reduces
our heuristic but in the latter solution that doesn't happen until step 8.

So while the end result of "3Fw2 F" vs "F 3Fw2" is the same, it does change our heuristic which can impact when branches
are pruned. This gotcha will apply to outer_layer_moves_in_order, steps_on_same_face_in_order and steps_on_opposite_faces_in_order.
I need to think about this some more...maybe we only use these trick in extreme scenarios?
